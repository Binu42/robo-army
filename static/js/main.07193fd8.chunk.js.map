{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js","robot.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","user","i","src_Card_0","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","children","style","overflowY","border","height","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","console","log","fetch","then","response","json","users","_this3","filteredRobots","filter","toLowerCase","includes","length","src_SearchBox","src_Scroll","src_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","username","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.07193fd8.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css'\n\nconst Card = ({name, email, id}) => {\n    return (\n        <div className='bg-light-blue dib pa2 ma2 grow bw2 shadow-5 card'>\n            <img src={`https://robohash.org/${id}?200x200`} alt='robots'/>\n            <div className='tc'>\n                <h2>{name}</h2>\n                <p className='underline'>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    return (\n        <div className='tc'>\n            {robots.map((user, i) => {\n                return (\n                    <Card \n                    key={robots[i].id} \n                    id= {robots[i].id} \n                    name= {robots[i].name}\n                    email= {robots[i].email}       \n                    />\n                    );\n            })}\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchField, searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input className='pa3 b-black bg-light-green ba' type='search' placeholder='Search Robots' onChange={searchChange}/>\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = ({children}) =>{\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n            {children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, {Component} from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\n// import {robots} from './robot';\nimport Scroll from './Scroll';\nimport './App.css';\n\nclass App extends Component {\n    constructor(){\n        super();\n        this.state = {\n            robots: [],\n            searchField: ''\n        }\n    }\n\n    componentDidMount() {\n        console.log('hello');\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({robots: users}));\n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchField: event.target.value});\n    }\n    render(){\n        const filteredRobots = this.state.robots.filter(robots => {\n            return robots.name.toLowerCase().includes(this.state.searchField.toLowerCase());\n        })\n        if(this.state.robots.length === 0){\n            return <h1 className='tc'>lOADING....</h1>\n        }\n        return (\n            <div className='tc'>\n                <h1 className='f1'>ROBOT ARMY</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                    <CardList robots={filteredRobots}/>\n                </Scroll>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {robots} from './robot';\n\nReactDOM.render(\n    <App robots={robots}/>\n     , document.getElementById('root'));\nserviceWorker.unregister();\n","export const robots = [\n    {\n      id: 1,\n      name: 'Leanne Graham',\n      username: 'Bret',\n      email: 'Sincere@april.biz'\n    },\n    {\n      id: 2,\n      name: 'Ervin Howell',\n      username: 'Antonette',\n      email: 'Shanna@melissa.tv'\n    },\n    {\n      id: 3,\n      name: 'Clementine Bauch',\n      username: 'Samantha',\n      email: 'Nathan@yesenia.net'\n    },\n    {\n      id: 4,\n      name: 'Patricia Lebsack',\n      username: 'Karianne',\n      email: 'Julianne.OConner@kory.org'\n    },\n    {\n      id: 5,\n      name: 'Chelsey Dietrich',\n      username: 'Kamren',\n      email: 'Lucio_Hettinger@annie.ca'\n    },\n    {\n      id: 6,\n      name: 'Mrs. Dennis Schulist',\n      username: 'Leopoldo_Corkery',\n      email: 'Karley_Dach@jasper.info'\n    },\n    {\n      id: 7,\n      name: 'Kurtis Weissnat',\n      username: 'Elwyn.Skiles',\n      email: 'Telly.Hoeger@billy.biz'\n    },\n    {\n      id: 8,\n      name: 'Nicholas Runolfsdottir V',\n      username: 'Maxime_Nienow',\n      email: 'Sherwood@rosamond.me'\n    },\n    {\n      id: 9,\n      name: 'Glenna Reichert',\n      username: 'Delphine',\n      email: 'Chaim_McDermott@dana.io'\n    },\n    {\n      id: 10,\n      name: 'Clementina DuBuque',\n      username: 'Moriah.Stanton',\n      email: 'Rey.Padberg@karina.biz'\n    }\n  ];"],"sourceRoot":""}